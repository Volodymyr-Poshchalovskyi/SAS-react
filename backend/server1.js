// scan-gcs.js

// 1. –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏
const { Storage } = require('@google-cloud/storage');
const fs = require('fs/promises');
require('dotenv').config(); // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –∑ .env

// 2. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
const BUCKET_NAME = process.env.GCS_BUCKET_NAME;
const KEY_BASE64 = process.env.GCS_SERVICE_ACCOUNT_KEY_BASE64;
const TARGET_FOLDER = 'front-end/08-about/01-New Team Photos'; // –ü–∞–ø–∫–∞, —è–∫—É —Å–∫–∞–Ω—É—î–º–æ
const OUTPUT_FILE = 'gcs_file_list.json'; // –ù–∞–∑–≤–∞ —Ñ–∞–π–ª—É –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º

// 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∑–º—ñ–Ω–Ω–∏—Ö
if (!BUCKET_NAME || !KEY_BASE64) {
  console.error('‚ùå –ü–æ–º–∏–ª–∫–∞: –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ GCS_BUCKET_NAME —Ç–∞ GCS_SERVICE_ACCOUNT_KEY_BASE64 —î —É —Ç–≤–æ—î–º—É .env —Ñ–∞–π–ª—ñ.');
  process.exit(1); // –ó—É–ø–∏–Ω—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, —è–∫—â–æ —á–æ–≥–æ—Å—å –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î
}


const keyJson = Buffer.from(KEY_BASE64, 'base64').toString('utf-8');
const credentials = JSON.parse(keyJson);
const storage = new Storage({ credentials });


async function scanBucket() {
  try {
    console.log(`üöÄ –ü–æ—á–∏–Ω–∞—î–º–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –ø–∞–ø–∫–∏ '${TARGET_FOLDER}' —É –±–∞–∫–µ—Ç—ñ '${BUCKET_NAME}'...`);

    // 5. –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤ –∑ GCS
    const [files] = await storage.bucket(BUCKET_NAME).getFiles({ prefix: TARGET_FOLDER });

    // 6. –§—ñ–ª—å—Ç—Ä—É—î–º–æ "–ø–∞–ø–∫–∏" —ñ —Ñ–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞–Ω—ñ
    const fileData = files
      .filter(file => !file.name.endsWith('/')) // –í–∏–∫–ª—é—á–∞—î–º–æ –æ–±'—î–∫—Ç–∏, —â–æ —î –ø–∞–ø–∫–∞–º–∏
      .map(file => ({
        path: file.name,
        size: file.metadata.size, // –†–æ–∑–º—ñ—Ä —É –±–∞–π—Ç–∞—Ö
        updated: file.metadata.updated, // –î–∞—Ç–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
      }));

    if (fileData.length === 0) {
      console.warn('‚ö†Ô∏è –£–≤–∞–≥–∞: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É –≤ –∑–∞–∑–Ω–∞—á–µ–Ω—ñ–π –ø–∞–ø—Ü—ñ.');
    } else {
      console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${fileData.length} —Ñ–∞–π–ª—ñ–≤.`);
    }

    // 7. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –≤ –ª–æ–∫–∞–ª—å–Ω–∏–π JSON-—Ñ–∞–π–ª
    await fs.writeFile(OUTPUT_FILE, JSON.stringify(fileData, null, 2));
    console.log(`‚ú® –£—Å–ø—ñ—Ö! –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª—ñ: ${OUTPUT_FILE}`);

  } catch (error) {
    console.error('‚ùå –°—Ç–∞–ª–∞—Å—è –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞:', error.message);
  }
}

// 8. –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é
scanBucket();