// cleanup-function/index.js
require('dotenv').config();
const { Storage } = require('@google-cloud/storage');
const { createClient } = require('@supabase/supabase-js');

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞, —è–∫—ñ –º–∏ –ø–µ—Ä–µ–¥–∞–º–æ –ø—Ä–∏ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—ñ)
const storage = new Storage();
const bucket = storage.bucket(process.env.GCS_BUCKET_NAME);

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

const VIDEO_PREFIX = 'back-end/videos/';
const PREVIEW_PREFIX = 'back-end/previews/';

/**
 * HTTP Cloud Function, —â–æ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å —ñ –≤–∏–¥–∞–ª—è—î "–æ—Å–∏—Ä–æ—Ç—ñ–ª—ñ" —Ñ–∞–π–ª–∏ –∑ GCS.
 * @param {express.Request} req The request object.
 * @param {express.Response} res The response object.
 */
exports.cleanupOrphanedFiles = async (req, res) => {
  console.log('üöÄ Starting cleanup of orphaned GCS files...');

  try {
    // 1. –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Ñ–∞–π–ª–∏ –≤—ñ–¥–µ–æ –∑ GCS
    const [gcsFiles] = await bucket.getFiles({ prefix: VIDEO_PREFIX });
    const gcsVideoPaths = gcsFiles.map(file => file.name).filter(name => !name.endsWith('/'));
    
    if (gcsVideoPaths.length === 0) {
      const msg = '‚úÖ No video files in GCS to check. Exiting.';
      console.log(msg);
      res.status(200).send(msg);
      return;
    }

    // 2. –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —à–ª—è—Ö–∏ –≤—ñ–¥–µ–æ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö Supabase
    const { data: dbRecords, error: dbError } = await supabase
      .from('media_items')
      .select('video_gcs_path');

    if (dbError) throw new Error(`Supabase error: ${dbError.message}`);
    const dbVideoPaths = new Set(dbRecords.map(r => r.video_gcs_path).filter(Boolean));

    // 3. –ó–Ω–∞–π—Ç–∏ "–æ—Å–∏—Ä–æ—Ç—ñ–ª—ñ" —Ñ–∞–π–ª–∏
    const orphanedVideoPaths = gcsVideoPaths.filter(gcsPath => !dbVideoPaths.has(gcsPath));
    
    if (orphanedVideoPaths.length === 0) {
      const msg = '‚úÖ No orphaned files found. Everything is in sync!';
      console.log(msg);
      res.status(200).send(msg);
      return;
    }

    console.log(`üö® Found ${orphanedVideoPaths.length} orphaned files to delete.`);

    // 4. –í–∏–¥–∞–ª–∏—Ç–∏ "–æ—Å–∏—Ä–æ—Ç—ñ–ª—ñ" –≤—ñ–¥–µ–æ —Ç–∞ —ó—Ö–Ω—ñ –ø—Ä–µ–≤'—é
    for (const videoPath of orphanedVideoPaths) {
      const fileName = videoPath.split('/').pop();
      // –ü—Ä–µ-–≤–∏–≥–ª—è–¥ –º–æ–∂–µ –º–∞—Ç–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è .jpg, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª - .mp4, —Ç–æ–º—É –≤—Ä–∞—Ö–æ–≤—É—î–º–æ —Ü–µ
      const previewName = fileName.includes('.') ? `${fileName.split('.').slice(0, -1).join('.')}.jpg` : `${fileName}.jpg`;
      const previewPath = `${PREVIEW_PREFIX}${previewName}`;
      
      await bucket.file(videoPath).delete();
      console.log(`   üëç Deleted video: ${videoPath}`);
      await bucket.file(previewPath).delete({ ignoreNotFound: true });
      console.log(`   üëç Deleted preview: ${previewPath}`);
    }

    const finalMsg = `‚úÖ Cleanup complete! Deleted ${orphanedVideoPaths.length} orphaned items.`;
    console.log(finalMsg);
    res.status(200).send(finalMsg);

  } catch (error) {
    console.error('‚ùå An error occurred during the cleanup process:', error);
    res.status(500).send(`Error during cleanup: ${error.message}`);
  }
};