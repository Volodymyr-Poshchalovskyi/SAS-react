import os
import tempfile
import cv2  # OpenCV –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–µ–æ
from google.cloud import storage

# --- –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø: –í–∫–∞–∂—ñ—Ç—å –≤–∞—à—ñ –¥–∞–Ω—ñ ---
PROJECT_ID = "new-sas-472103"
BUCKET_NAME = "new-sas-media-storage"
# –ü–∞–ø–∫–∞, –∑ —è–∫–æ—ó –±–µ—Ä–µ–º–æ –≤—ñ–¥–µ–æ
SOURCE_DIRECTORY = "front-end/04-Service/"
# –ë–∞–∑–æ–≤–∞ –ø–∞–ø–∫–∞, –∫—É–¥–∏ –±—É–¥–µ–º–æ —Å–∫–ª–∞–¥–∞—Ç–∏ –≤—Å—ñ –ø—Ä–µ–≤'—é
DESTINATION_BASE_DIRECTORY = "front-end/04-Service/VIDEO_PREVIEW/"
# ----------------------------------------------------

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
try:
    storage_client = storage.Client(project=PROJECT_ID)
    bucket = storage_client.bucket(BUCKET_NAME)
except Exception as e:
    print(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Google Cloud Storage. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é.")
    print(f"–î–µ—Ç–∞–ª—ñ: {e}")
    exit()

def generate_preview_from_video(video_blob, temp_dir_path):
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –≤—ñ–¥–µ–æ, —Å—Ç–≤–æ—Ä—é—î –∑ –Ω—å–æ–≥–æ –ø—Ä–µ–≤'—é —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —à–ª—è—Ö –¥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª—É –ø—Ä–µ–≤'—é.
    """
    base_filename = os.path.basename(video_blob.name)
    local_video_path = os.path.join(temp_dir_path, base_filename)
    
    try:
        # 1. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—ñ–¥–µ–æ—Ñ–∞–π–ª —É —Ç–∏–º—á–∞—Å–æ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é
        print(f"  -> –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è '{base_filename}' –¥–ª—è –æ–±—Ä–æ–±–∫–∏...")
        video_blob.download_to_filename(local_video_path)

        # 2. –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –≤—ñ–¥–µ–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é OpenCV
        vidcap = cv2.VideoCapture(local_video_path)
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –Ω–∞ 1000 –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥—É (1 —Å–µ–∫—É–Ω–¥–∞)
        vidcap.set(cv2.CAP_PROP_POS_MSEC, 1000)
        success, image = vidcap.read()

        # –Ø–∫—â–æ –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—ñ –∫–∞–¥—Ä—É –Ω–µ–º–∞—î (–Ω–∞–ø—Ä. –≤—ñ–¥–µ–æ –∫–æ—Ä–æ—Ç—à–µ), –±–µ—Ä–µ–º–æ –Ω–∞–π–ø–µ—Ä—à–∏–π –∫–∞–¥—Ä
        if not success:
            print("  -> –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∑—è—Ç–∏ –∫–∞–¥—Ä –Ω–∞ 1-–π —Å–µ–∫—É–Ω–¥—ñ, –ø—Ä–æ–±—É—é –ø–µ—Ä—à–∏–π –∫–∞–¥—Ä...")
            vidcap.set(cv2.CAP_PROP_POS_FRAMES, 0)
            success, image = vidcap.read()

        if success:
            # 3. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–∞–¥—Ä —è–∫ JPG —Ñ–∞–π–ª
            video_filename_without_ext = os.path.splitext(base_filename)[0]
            local_preview_path = os.path.join(temp_dir_path, f"{video_filename_without_ext}.jpg")
            
            cv2.imwrite(local_preview_path, image)
            print(f"  -> –ü—Ä–µ–≤'—é —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ: '{os.path.basename(local_preview_path)}'")
            
            vidcap.release() # –ó–≤—ñ–ª—å–Ω—è—î–º–æ —Ä–µ—Å—É—Ä—Å
            return local_preview_path
        else:
            print(f"  -> –ü–û–ú–ò–õ–ö–ê: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑—á–∏—Ç–∞—Ç–∏ –∫–∞–¥—Ä–∏ –∑ –≤—ñ–¥–µ–æ '{base_filename}'.")
            vidcap.release()
            return None

    except Exception as e:
        print(f"  -> –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ '{base_filename}': {e}")
        return None
    finally:
        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π –≤—ñ–¥–µ–æ—Ñ–∞–π–ª, —â–æ–± –Ω–µ –∑–∞–π–º–∞—Ç–∏ –º—ñ—Å—Ü–µ
        if os.path.exists(local_video_path):
            os.remove(local_video_path)


def main():
    """
    –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è, —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–µ–≤'—é.
    """
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞–∑–≤—É –ø—ñ–¥–ø–∞–ø–∫–∏ –∑ –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ —à–ª—è—Ö—É (–Ω–∞–ø—Ä. '01-SUPERNOVA')
    source_subfolder_name = SOURCE_DIRECTORY.strip('/').split('/')[-1]
    
    # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤–Ω–∏–π —à–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –ø—Ä–µ–≤'—é
    destination_preview_folder = f"{DESTINATION_BASE_DIRECTORY.strip('/')}/{source_subfolder_name}/"
    
    print(f"üîç –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –ø–∞–ø–∫–∏: gs://{BUCKET_NAME}/{SOURCE_DIRECTORY}")
    print(f"üñºÔ∏è  –ü–∞–ø–∫–∞ –¥–ª—è –ø—Ä–µ–≤'—é: gs://{BUCKET_NAME}/{destination_preview_folder}\n")

    blobs = bucket.list_blobs(prefix=SOURCE_DIRECTORY)
    video_extensions = ['.mp4', '.mov', '.mkv', '.avi', '.webm']
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é, —è–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å—Å—è –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    with tempfile.TemporaryDirectory() as temp_dir:
        for blob in blobs:
            # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –æ–±'—î–∫—Ç–∏, —â–æ —î –ø–∞–ø–∫–∞–º–∏, —Ç–∞ —Ñ–∞–π–ª–∏, —â–æ –Ω–µ —î –≤—ñ–¥–µ–æ
            if blob.name.endswith('/') or not any(blob.name.lower().endswith(ext) for ext in video_extensions):
                continue

            print(f"–ó–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–¥–µ–æ: {blob.name}")

            # –§–æ—Ä–º—É—î–º–æ —ñ–º'—è –¥–ª—è —Ñ–∞–π–ª—É –ø—Ä–µ–≤'—é
            video_filename_without_ext = os.path.splitext(os.path.basename(blob.name))[0]
            preview_blob_name = f"{destination_preview_folder}{video_filename_without_ext}.jpg"
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø—Ä–µ–≤'—é –≤–∂–µ —ñ—Å–Ω—É—î –≤ –±–∞–∫–µ—Ç—ñ
            preview_blob = bucket.blob(preview_blob_name)
            if preview_blob.exists():
                print("  -> –ü—Ä–µ–≤'—é –≤–∂–µ —ñ—Å–Ω—É—î. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ.\n")
                continue

            # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø—Ä–µ–≤'—é
            local_preview_path = generate_preview_from_video(blob, temp_dir)

            # –Ø–∫—â–æ –ø—Ä–µ–≤'—é –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –π–æ–≥–æ
            if local_preview_path:
                print(f"  -> –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–µ–≤'—é –≤ gs://{BUCKET_NAME}/{preview_blob_name}...")
                preview_blob.upload_from_filename(local_preview_path)
                print("  -> ‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!\n")
                # –í–∏–¥–∞–ª—è—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª –ø—Ä–µ–≤'—é
                os.remove(local_preview_path)
            else:
                 print("  -> ‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–µ–≤'—é –¥–ª—è —Ü—å–æ–≥–æ —Ñ–∞–π–ª—É.\n")

    print("üèÅ –†–æ–±–æ—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

if __name__ == "__main__":
    main()