import os
import tempfile
import cv2  # OpenCV –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–µ–æ
from google.cloud import storage
from collections import defaultdict

# --- –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø: –í–∫–∞–∂—ñ—Ç—å –≤–∞—à—ñ –¥–∞–Ω—ñ ---
PROJECT_ID = "new-sas-472103"
BUCKET_NAME = "new-sas-media-storage"
# –ë–∞–∑–æ–≤–∞ –ø–∞–ø–∫–∞, –¥–µ –∑–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è –ø–∞–ø–∫–∏ –í–°–Ü–• —Ä–µ–∂–∏—Å–µ—Ä—ñ–≤
BASE_TRANSCODED_DIRECTORY = "front-end/01-Directors/TRANSCODED/"
# –ë–∞–∑–æ–≤–∞ –ø–∞–ø–∫–∞, –∫—É–¥–∏ –±—É–¥–µ–º–æ —Å–∫–ª–∞–¥–∞—Ç–∏ –≤—Å—ñ –ø—Ä–µ–≤'—é
DESTINATION_BASE_DIRECTORY = "front-end/01-Directors/VIDEO_PREVIEW"
# ----------------------------------------------------

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
try:
    storage_client = storage.Client(project=PROJECT_ID)
    bucket = storage_client.bucket(BUCKET_NAME)
except Exception as e:
    print(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Google Cloud Storage. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é.")
    print(f"–î–µ—Ç–∞–ª—ñ: {e}")
    exit()

def generate_preview_from_video(video_blob, temp_dir_path):
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –≤—ñ–¥–µ–æ, —Å—Ç–≤–æ—Ä—é—î –∑ –Ω—å–æ–≥–æ –ø—Ä–µ–≤'—é —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —à–ª—è—Ö –¥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª—É –ø—Ä–µ–≤'—é.
    """
    base_filename = os.path.basename(video_blob.name)
    local_video_path = os.path.join(temp_dir_path, base_filename)
    
    try:
        print(f"  -> –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è '{base_filename}' –¥–ª—è –æ–±—Ä–æ–±–∫–∏...")
        video_blob.download_to_filename(local_video_path)

        vidcap = cv2.VideoCapture(local_video_path)

        # –ù–µ –≤–∏—Å—Ç–∞–≤–ª—è—î–º–æ —á–∞—Å ‚Äî –±–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π –∫–∞–¥—Ä
        success, image = vidcap.read()


        if not success:
            print("  -> –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∑—è—Ç–∏ –∫–∞–¥—Ä –Ω–∞ 1-–π —Å–µ–∫—É–Ω–¥—ñ, –ø—Ä–æ–±—É—é –ø–µ—Ä—à–∏–π –∫–∞–¥—Ä...")
            vidcap.set(cv2.CAP_PROP_POS_FRAMES, 0)
            success, image = vidcap.read()

        if success:
            video_filename_without_ext = os.path.splitext(base_filename)[0]
            local_preview_path = os.path.join(temp_dir_path, f"{video_filename_without_ext}_{os.urandom(4).hex()}.jpg")
            cv2.imwrite(local_preview_path, image)
            print(f"  -> –ü—Ä–µ–≤'—é —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ.")
            vidcap.release()
            return local_preview_path
        else:
            print(f"  -> –ü–û–ú–ò–õ–ö–ê: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑—á–∏—Ç–∞—Ç–∏ –∫–∞–¥—Ä–∏ –∑ –≤—ñ–¥–µ–æ '{base_filename}'.")
            vidcap.release()
            return None
    except Exception as e:
        print(f"  -> –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ '{base_filename}': {e}")
        return None
    finally:
        if os.path.exists(local_video_path):
            os.remove(local_video_path)

def process_director_folder(source_directory):
    """
    –û–±—Ä–æ–±–ª—è—î –æ–¥–Ω—É –ø–∞–ø–∫—É —Ä–µ–∂–∏—Å–µ—Ä–∞: –∑–Ω–∞—Ö–æ–¥–∏—Ç—å —É—Å—ñ –≤—ñ–¥–µ–æ, –≥—Ä—É–ø—É—î —ó—Ö,
    —Å—Ç–≤–æ—Ä—é—î —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î –ø—Ä–µ–≤'—é.
    """
    source_subfolder_name = source_directory.strip('/').split('/')[-1]
    destination_preview_folder = f"{DESTINATION_BASE_DIRECTORY.strip('/')}/{source_subfolder_name}/"
    
    print(f"üé¨ –û–±—Ä–æ–±–∫–∞ –ø–∞–ø–∫–∏ —Ä–µ–∂–∏—Å–µ—Ä–∞: {source_subfolder_name}")
    print(f"   -> –î–∂–µ—Ä–µ–ª–æ: gs://{BUCKET_NAME}/{source_directory}")
    print(f"   -> –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: gs://{BUCKET_NAME}/{destination_preview_folder}\n")

    blobs = bucket.list_blobs(prefix=source_directory)
    video_extensions = ['.mp4', '.mov', '.mkv', '.avi', '.webm', '.ts']
    
    video_groups = defaultdict(list)
    for blob in blobs:
        if blob.name.endswith('/') or not any(blob.name.lower().endswith(ext) for ext in video_extensions):
            continue
        parent_dir_path = os.path.dirname(blob.name)
        video_groups[parent_dir_path].append(blob)

    if not video_groups:
        print("   -> –í—ñ–¥–µ–æ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤ —Ü—ñ–π –ø–∞–ø—Ü—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\n")
        return

    with tempfile.TemporaryDirectory() as temp_dir:
        for parent_dir, blob_list in video_groups.items():
            video_base_name = os.path.basename(parent_dir)
            print(f"–ó–Ω–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø—É –≤—ñ–¥–µ–æ: '{video_base_name}'")

            preview_blob_name = f"{destination_preview_folder}{video_base_name}.jpg"
            preview_blob = bucket.blob(preview_blob_name)

            if preview_blob.exists():
                print("  -> –ü—Ä–µ–≤'—é –¥–ª—è —Ü—ñ—î—ó –≥—Ä—É–ø–∏ –≤–∂–µ —ñ—Å–Ω—É—î. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ.\n")
                continue

            target_blob = None
            for blob in blob_list:
                if '1080p' in blob.name.lower():
                    target_blob = blob
                    break
            
            if not target_blob:
                target_blob = blob_list[0]

            print(f"  -> –û–±—Ä–∞–Ω–æ —Ñ–∞–π–ª –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó: '{os.path.basename(target_blob.name)}'")
            local_preview_path = generate_preview_from_video(target_blob, temp_dir)

            if local_preview_path:
                print(f"  -> –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–µ–≤'—é –≤ gs://{BUCKET_NAME}/{preview_blob_name}...")
                preview_blob.upload_from_filename(local_preview_path)
                print("  -> ‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!\n")
                os.remove(local_preview_path)
            else:
                 print("  -> ‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–µ–≤'—é –¥–ª—è —Ü—å–æ–≥–æ —Ñ–∞–π–ª—É.\n")

def main():
    """
    –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è: –∑–Ω–∞—Ö–æ–¥–∏—Ç—å —É—Å—ñ –ø–∞–ø–∫–∏ —Ä–µ–∂–∏—Å–µ—Ä—ñ–≤ —ñ –∑–∞–ø—É—Å–∫–∞—î –æ–±—Ä–æ–±–∫—É –¥–ª—è –∫–æ–∂–Ω–æ—ó.
    """
    print(f"üöÄ –ü–æ—á–∏–Ω–∞—é —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ä–µ–∂–∏—Å–µ—Ä—ñ–≤ —É: gs://{BUCKET_NAME}/{BASE_TRANSCODED_DIRECTORY}")
    
    all_blobs = bucket.list_blobs(prefix=BASE_TRANSCODED_DIRECTORY)
    director_folders = set() 

    for blob in all_blobs:
        if blob.name.endswith('/'):
            continue
            
        relative_path = blob.name[len(BASE_TRANSCODED_DIRECTORY):]
        director_name = relative_path.split('/')[0]
        
        if director_name:
            full_director_path = f"{BASE_TRANSCODED_DIRECTORY}{director_name}/"
            director_folders.add(full_director_path)

    if not director_folders:
        print("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ—ó –ø–∞–ø–∫–∏ —Ä–µ–∂–∏—Å–µ—Ä—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏.")
        return

    print(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(director_folders)} –ø–∞–ø–æ–∫ —Ä–µ–∂–∏—Å–µ—Ä—ñ–≤. –ü–æ—á–∏–Ω–∞—é –æ–±—Ä–æ–±–∫—É...")
    print("-" * 60)

    for director_path in sorted(list(director_folders)):
        process_director_folder(director_path)
        print("-" * 60)

    print("üèÅ –†–æ–±–æ—Ç—É –ø–æ –≤—Å—ñ–º —Ä–µ–∂–∏—Å–µ—Ä–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

if __name__ == "__main__":
    main()